package entidade;
// Generated 09/09/2016 09:36:48 by Hibernate Tools 4.3.1

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

/**
 * AlunoSimulado generated by hbm2java
 */
@Entity
@Table(name = "aluno_simulado", catalog = "kemdixip_sgedanovo"
)
public class AlunoSimulado implements java.io.Serializable {

    private AlunoSimuladoId id;
    private Aluno aluno;
    private TurmaSimulado turmaSimulado;
    private Date data;
    private Set<Resposta> respostas = new HashSet<>(0);

    public AlunoSimulado() {
    }

    public AlunoSimulado(AlunoSimuladoId id, Aluno aluno, TurmaSimulado simulado) {
        this.id = id;
        this.aluno = aluno;
        this.turmaSimulado = simulado;
    }

    public AlunoSimulado(AlunoSimuladoId id, Aluno aluno, TurmaSimulado simulado, Date data, Set<Resposta> respostas) {
        this.id = id;
        this.aluno = aluno;
        this.turmaSimulado = simulado;
        this.data = data;
        this.respostas = respostas;
    }

    @EmbeddedId

    @AttributeOverrides({
        @AttributeOverride(name = "alunoIdAluno", column = @Column(name = "aluno_idAluno", nullable = false)),
        @AttributeOverride(name = "simuladoIdSimulado", column = @Column(name = "simulado_idSimulado", nullable = false)),
        @AttributeOverride(name = "turmaIdTurma", column = @Column(name = "turma_idTurma", nullable = false))})
    public AlunoSimuladoId getId() {
        return this.id;
    }

    public void setId(AlunoSimuladoId id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "aluno_idAluno", nullable = false, insertable = false, updatable = false)
    public Aluno getAluno() {
        return this.aluno;
    }

    public void setAluno(Aluno aluno) {
        this.aluno = aluno;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumns({
        @JoinColumn(name = "simulado_idSimulado", referencedColumnName = "simulado_idSimulado", nullable = false, insertable = false, updatable = false),
        @JoinColumn(name = "turma_idTurma", referencedColumnName = "turma_idTurma", nullable = false, insertable = false, updatable = false)})
    public TurmaSimulado getTurmaSimulado() {
        return this.turmaSimulado;
    }

    public void setTurmaSimulado(TurmaSimulado turmaSimulado) {
        this.turmaSimulado = turmaSimulado;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "data", length = 19)
    public Date getData() {
        return this.data;
    }

    public void setData(Date data) {
        this.data = data;
    }

    @OneToMany(fetch = FetchType.EAGER, mappedBy = "alunoSimulado")
    public Set<Resposta> getRespostas() {
        return this.respostas;
    }
    
    @Transient
    public List<Resposta> getRespostasListOrd(){
        List<Resposta> lista = new ArrayList<>(this.getRespostas());
         Collections.sort( lista, new Comparator<Resposta>() {
            public int compare(Resposta obj1, Resposta obj2) {
                return obj1.getQuestao().getIdQuestao().compareTo(obj2.getQuestao().getIdQuestao());
            }
        });
        return lista;
    }

    public void setRespostas(Set<Resposta> respostas) {
        this.respostas = respostas;
    }
    
    @Transient
    public List<Resposta> getRespostasList(){
        return new ArrayList<>(this.getRespostas());
    }

    @Transient
    public BigDecimal getNota() {
        BigDecimal total = new BigDecimal(BigInteger.ZERO);
        for (Resposta resposta : respostas) {
            if (resposta.getNota() != null) {
                total = total.add(resposta.getNota());
            }
        }
        return total;
    }
    
    @Transient
    public boolean isCorrigido() {
        for (Resposta resposta : respostas) {
            if (resposta.getNota() == null) {
                return false;
            }
        }
        return true;
    }

}

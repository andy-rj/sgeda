package entidade;
// Generated 22/08/2016 17:01:00 by Hibernate Tools 4.3.1


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

/**
 * Usuario generated by hbm2java
 */
@Entity
@Table(name="usuario"
    ,catalog="sgeda"
)
public class Usuario  implements java.io.Serializable {


     private UsuarioId id;
     private Pessoa pessoa;
     private String login;
     private String senha;
     private Boolean ativo;
     private Date ultimoLogin;
     private Set<Papel> papels;
     public static final int PAPEL_PROFESSOR = 1;
     public static final int PAPEL_ALUNO = 2;
     public static final int PAPEL_CADASTRO = 3;
     public static final int PAPEL_ADMINSTRADOR = 4;


    public Usuario() {
        this.papels = new HashSet(0);
    }

	
    public Usuario(UsuarioId id, Pessoa pessoa) {
        this.papels = new HashSet(0);
        this.id = id;
        this.pessoa = pessoa;
    }
    public Usuario(UsuarioId id, Pessoa pessoa, String login, String senha, Boolean ativo, Date ultimoLogin, Set papels) {
        this.papels = new HashSet(0);
       this.id = id;
       this.pessoa = pessoa;
       this.login = login;
       this.senha = senha;
       this.ativo = ativo;
       this.ultimoLogin = ultimoLogin;
       this.papels = papels;
    }
   
     @EmbeddedId

    
    @AttributeOverrides( {
        @AttributeOverride(name="idUsuario", column=@Column(name="idUsuario", nullable=false) ), 
        @AttributeOverride(name="idPessoa", column=@Column(name="idPessoa", nullable=false) ) } )
    public UsuarioId getId() {
        return this.id;
    }
    
    public void setId(UsuarioId id) {
        this.id = id;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="idPessoa", nullable=false, insertable=false, updatable=false)
    public Pessoa getPessoa() {
        return this.pessoa;
    }
    
    public void setPessoa(Pessoa pessoa) {
        this.pessoa = pessoa;
    }

    
    @Column(name="login", length=45)
    public String getLogin() {
        return this.login;
    }
    
    public void setLogin(String login) {
        this.login = login;
    }

    
    @Column(name="senha", length=45)
    public String getSenha() {
        return this.senha;
    }
    
    public void setSenha(String senha) {
        this.senha = senha;
    }

    
    @Column(name="ativo")
    public Boolean getAtivo() {
        return this.ativo;
    }
    
    public void setAtivo(Boolean ativo) {
        this.ativo = ativo;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="ultimoLogin", length=19)
    public Date getUltimoLogin() {
        return this.ultimoLogin;
    }
    
    public void setUltimoLogin(Date ultimoLogin) {
        this.ultimoLogin = ultimoLogin;
    }

@ManyToMany(fetch=FetchType.EAGER)
    @JoinTable(name="papel_has_usuario", catalog="sgeda", joinColumns = { 
        @JoinColumn(name="usuario_idUsuario", nullable=false, updatable=false), 
        @JoinColumn(name="usuario_idPessoa", nullable=false, updatable=false) }, inverseJoinColumns = { 
        @JoinColumn(name="papel_idPapel", nullable=false, updatable=false) })
    public Set<Papel> getPapels() {
        return this.papels;
    }
    
    public void setPapels(Set papels) {
        this.papels = papels;
    }

    @Transient
    public boolean isAdminstrador(){
        for(Papel papel: papels){
            if(papel.getIdPapel() == PAPEL_ADMINSTRADOR) return true;
        }
        return false;
    }
    
    @Transient
    public boolean isAluno(){
        for(Papel papel: papels){
            if(papel.getIdPapel() == PAPEL_ALUNO) return true;
        }
        return false;
    }
    
    @Transient
    public boolean isProfessor(){
        for(Papel papel: papels){
            if(papel.getIdPapel() == PAPEL_PROFESSOR) return true;
        }
        return false;
    }
    
    @Transient
    public boolean isCadastro(){
        for(Papel papel: papels){
            if(papel.getIdPapel() == PAPEL_CADASTRO) return true;
        }
        return false;
    }



}


